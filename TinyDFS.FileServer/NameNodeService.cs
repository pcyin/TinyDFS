//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34003
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace NameNode
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DFSFileInfo", Namespace="http://schemas.datacontract.org/2004/07/NameNode")]
    public partial class DFSFileInfo : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private NameNode.Chunk[] ChunksField;
        
        private string FileNameField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public NameNode.Chunk[] Chunks
        {
            get
            {
                return this.ChunksField;
            }
            set
            {
                this.ChunksField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FileName
        {
            get
            {
                return this.FileNameField;
            }
            set
            {
                this.FileNameField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Chunk", Namespace="http://schemas.datacontract.org/2004/07/NameNode")]
    public partial class Chunk : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private NameNode.ServerInfo FileServerField;
        
        private string GUIDField;
        
        private int OrderField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public NameNode.ServerInfo FileServer
        {
            get
            {
                return this.FileServerField;
            }
            set
            {
                this.FileServerField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GUID
        {
            get
            {
                return this.GUIDField;
            }
            set
            {
                this.GUIDField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Order
        {
            get
            {
                return this.OrderField;
            }
            set
            {
                this.OrderField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServerInfo", Namespace="http://schemas.datacontract.org/2004/07/NameNode")]
    public partial class ServerInfo : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private bool AvailableField;
        
        private string FileServerServicePointField;
        
        private int IdField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Available
        {
            get
            {
                return this.AvailableField;
            }
            set
            {
                this.AvailableField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FileServerServicePoint
        {
            get
            {
                return this.FileServerServicePointField;
            }
            set
            {
                this.FileServerServicePointField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id
        {
            get
            {
                return this.IdField;
            }
            set
            {
                this.IdField = value;
            }
        }
    }
}


[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(ConfigurationName="INameNodeService")]
public interface INameNodeService
{
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INameNodeService/GetUploadInfo", ReplyAction="http://tempuri.org/INameNodeService/GetUploadInfoResponse")]
    NameNode.DFSFileInfo GetUploadInfo(string fileName, long size);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INameNodeService/GetUploadInfo", ReplyAction="http://tempuri.org/INameNodeService/GetUploadInfoResponse")]
    System.Threading.Tasks.Task<NameNode.DFSFileInfo> GetUploadInfoAsync(string fileName, long size);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INameNodeService/GetDownLoadInfo", ReplyAction="http://tempuri.org/INameNodeService/GetDownLoadInfoResponse")]
    NameNode.DFSFileInfo GetDownLoadInfo(string fileName);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INameNodeService/GetDownLoadInfo", ReplyAction="http://tempuri.org/INameNodeService/GetDownLoadInfoResponse")]
    System.Threading.Tasks.Task<NameNode.DFSFileInfo> GetDownLoadInfoAsync(string fileName);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INameNodeService/Register", ReplyAction="http://tempuri.org/INameNodeService/RegisterResponse")]
    bool Register(int id, string servicePoint);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INameNodeService/Register", ReplyAction="http://tempuri.org/INameNodeService/RegisterResponse")]
    System.Threading.Tasks.Task<bool> RegisterAsync(int id, string servicePoint);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INameNodeService/HeartBeat", ReplyAction="http://tempuri.org/INameNodeService/HeartBeatResponse")]
    bool HeartBeat(int id);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INameNodeService/HeartBeat", ReplyAction="http://tempuri.org/INameNodeService/HeartBeatResponse")]
    System.Threading.Tasks.Task<bool> HeartBeatAsync(int id);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INameNodeService/DeleteFile", ReplyAction="http://tempuri.org/INameNodeService/DeleteFileResponse")]
    bool DeleteFile(string fileName);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INameNodeService/DeleteFile", ReplyAction="http://tempuri.org/INameNodeService/DeleteFileResponse")]
    System.Threading.Tasks.Task<bool> DeleteFileAsync(string fileName);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INameNodeService/GetFileList", ReplyAction="http://tempuri.org/INameNodeService/GetFileListResponse")]
    string[] GetFileList();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INameNodeService/GetFileList", ReplyAction="http://tempuri.org/INameNodeService/GetFileListResponse")]
    System.Threading.Tasks.Task<string[]> GetFileListAsync();
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public interface INameNodeServiceChannel : INameNodeService, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class NameNodeServiceClient : System.ServiceModel.ClientBase<INameNodeService>, INameNodeService
{
    
    public NameNodeServiceClient()
    {
    }
    
    public NameNodeServiceClient(string endpointConfigurationName) : 
            base(endpointConfigurationName)
    {
    }
    
    public NameNodeServiceClient(string endpointConfigurationName, string remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public NameNodeServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public NameNodeServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(binding, remoteAddress)
    {
    }
    
    public NameNode.DFSFileInfo GetUploadInfo(string fileName, long size)
    {
        return base.Channel.GetUploadInfo(fileName, size);
    }
    
    public System.Threading.Tasks.Task<NameNode.DFSFileInfo> GetUploadInfoAsync(string fileName, long size)
    {
        return base.Channel.GetUploadInfoAsync(fileName, size);
    }
    
    public NameNode.DFSFileInfo GetDownLoadInfo(string fileName)
    {
        return base.Channel.GetDownLoadInfo(fileName);
    }
    
    public System.Threading.Tasks.Task<NameNode.DFSFileInfo> GetDownLoadInfoAsync(string fileName)
    {
        return base.Channel.GetDownLoadInfoAsync(fileName);
    }
    
    public bool Register(int id, string servicePoint)
    {
        return base.Channel.Register(id, servicePoint);
    }
    
    public System.Threading.Tasks.Task<bool> RegisterAsync(int id, string servicePoint)
    {
        return base.Channel.RegisterAsync(id, servicePoint);
    }
    
    public bool HeartBeat(int id)
    {
        return base.Channel.HeartBeat(id);
    }
    
    public System.Threading.Tasks.Task<bool> HeartBeatAsync(int id)
    {
        return base.Channel.HeartBeatAsync(id);
    }
    
    public bool DeleteFile(string fileName)
    {
        return base.Channel.DeleteFile(fileName);
    }
    
    public System.Threading.Tasks.Task<bool> DeleteFileAsync(string fileName)
    {
        return base.Channel.DeleteFileAsync(fileName);
    }
    
    public string[] GetFileList()
    {
        return base.Channel.GetFileList();
    }
    
    public System.Threading.Tasks.Task<string[]> GetFileListAsync()
    {
        return base.Channel.GetFileListAsync();
    }
}
